gcc tdas/*.c tarea3.c -o tarea3 -I./tdas -Wno-unused-result


## TDAs
En la carpeta `tdas` se encuentran implementados TDAs ha utilizar (extra, lista y map). 
lista cuenta con las funciones:

````````
Extra
````````

`Funcion que lee una línea del archivo CSV y la separa en campos usando el delimitador dado`
## char **leer_linea_csv(FILE *archivo, char separador);

`Función para comparar cadenas`
## List *split_string(const char *str, const char *delim);

`Función para limpiar la pantalla`
## void limpiarPantalla();

`Función que espera a que el usuario presione una tecla para continuar`
## void presioneTeclaParaContinuar();


````````
Lista
````````

`Esta función crea una lista vacía y devuelve un puntero a la lista.`
## List *list_create();

`Esta función devuelve un puntero al primer elemento de la lista.`
## void *list_first(List *L);

`Esta función mueve el puntero de la lista al siguiente elemento y devuelve un puntero a dicho elemento.`
## void *list_next(List *L);

`Esta función inserta un nuevo elemento al inicio de la lista.`
## void list_pushFront(List *L, void *dato);

`Esta función inserta un nuevo elemento al final de la lista.`
## void list_pushBack(List *L, void *dato);

`Esta función inserta un nuevo elemento a continuación del actual de la lista.`
## void list_pushCurrent(List *L, void *dato);

`Esta función elimina el primer elemento de la lista.`
## void *list_popFront(List *L);

`Esta función elimina el último elemento de la lista.`
## void *list_popBack(List *L);

`Esta función elimina el elemento actual de la lista.`
## void *list_popCurrent(List *L);

`Esta función elimina todos los elementos de la lista.`
## void list_clean(List *L);

`Función para insertar ordenado de acuerdo a la función lower_than`
## void list_sortedInsert(List *L, void *data, int (*lower_than)(void *data1, void *data2));

`Esta función encuentra el tamaño de la lista.`
## int list_size(List* L);

````````
Map
````````
`Funcion para crear una tabla hash vacía con la capacidad inicial dada`
## HashMap * createMap(long capacity);

`Funcion que inserta un par clave-valor en la tabla hash, reemplaza si la clave ya existe`
## void insertMap(HashMap * table, char * key, void * value);

`Funcion que elimina un par clave-valor de la tabla hash`
## void eraseMap(HashMap * table, char * key);

`busca un par clave-valor en la tabla hash por su clave`
## Pair * searchMap(HashMap * table, char * key);

`retorna el primer par válido de la tabla hash (inicia la iteración)`
## Pair * firstMap(HashMap * table);

`retorna el siguiente par válido en la iteración de la tabla hash`
## Pair * nextMap(HashMap * table);

`duplica la capacidad de la tabla hash y reubica todos los elementos`
## void enlarge(HashMap * map);